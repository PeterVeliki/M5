\documentclass[10pt,twoside,a4paper,onecolumn]{book}
\pagestyle{headings}
\usepackage[slovene]{babel}
\usepackage[T1]{fontenc}
\usepackage[pdftex]{graphicx} 
\usepackage[utf8]{inputenc}

% naslov
\author{Peter Novak}
\title{Trgovalni algoritem M5 - V1}
\begin{document}

\maketitle

\tableofcontents

\chapter{Opis algoritma}

\section{Osnovni elementi}
Osnovni pojmi oziroma elementi algoritma so naslednji:
\begin{itemize}
	\item začetna cena $c_z$: cena pri kateri algoritem poženemo;
	\item osnovna raven za nakup $b_0$: cena pri kateri se začnemo usmerjati v nakup;
	\item osnovna raven za prodajo $s_0$: cena pri kateri se začnemo usmerjati v prodajo;
	\item razdalja med osnovnima ravnema za nakup in prodajo: $d = b_0 - s_0$;
	\item dodatna raven za prodajo $s_i, 0 < i, \forall i: s_{i+1} < s_i$;
	\item dodatna raven za nakup $b_j, 0 < j, \forall j: b_{j+1} > b_j$;
	\item razdalja med dodatnimi ravnmi za prodajo ali nakup $r = s_i - s_{i+1} = b_{i+1} - b_i$;
	\item velikost pozicij, ki jih odpira algoritem $L$.
\end{itemize}

\section{Zagon algoritma}
Vhodni parametri algoritma, ki jih pred zagonom določi in vpiše uporabnik so:
\begin{itemize}
	\item razdalja med osnovnima ravnema za nakup in prodajo: $d$;
	\item razdalja med dodatnimi ravnmi za prodajo ali nakup: $r$;
	\item začetna cena $c_z$;
	\item velikost pozicij v lotih $L$;
	\item profitni cilj $p$;
	\item samodejni ponovni zagon - DA/NE;
	\item številka iteracije $n$.
\end{itemize}
Razdaljo med osnovnima ravnema $d$, razdaljo med dodatnimi ravnmi $r$ ter profitni cilj $p$ vpišemo v točkah, velikost pozicij v lotih $L$ pa enako kot pri ročnem vnosu preko terminala. Pri nastavitvi vhodnega parametra začetna cena $c_z$ imamo naslednji dve možnosti:
\begin{itemize}
	\item če je podana vrednost parametra enaka 0, potem se algoritem zažene takoj in začetna cena postane trenutna cena valutnega para (Bid);
	\item če je podana vrednost parametra večja od 0, potem algoritem čaka, da cena valutnega para (Bid) doseže podano vrednost in se zažene, ko je le-ta dosežena.
\end{itemize}
Pri nastavitvi samodejnega ponovnega zagona imamo naslednji dve možnosti:
\begin{itemize}
	\item če je podana vrednost parametra enaka 0, potem se algoritem po doseženem profitnem cilju $p$, \emph{ne} bo več zagnal, temveč bo šel v stanje mirovanja;
	\item če je podana vrednost parametra različna od 0, potem se bo algoritem po doseženem profitnem cilju $p$, ponovno zagnal in sicer bo za vrednost $c_z$ uporabil trenutno ceno valutnega para (Bid).
\end{itemize}
Pri nastavitvi številke iteracije imamo naslednji dve možnosti:
\begin{itemize}
	\item če je prišlo do prekinitve delovanja algoritma zaradi ponovnega zagona računalnika in obstajajo odprte pozicije, ki imajo številko iteracije $n$, potem v ta parameter vnesemo številko $n$ in algoritem bo prebral ustrezne vrednosti za to številko iteracije iz datoteke in obstoječih pozicij ter nadaljeval delo na iteraciji $n$;
	\item če želimo zagon nove iteracije, potem podamo vrednost 0.
\end{itemize}

\section{Nastavitev začetnih vrednosti algoritma}
Po zagonu algoritma, ko je enkrat določena vrednost $c_z$, lahko določimo osnovni ravni za nakup in prodajo takole: 
\begin{equation}
	b_0 = c_z + \frac{d}{2}
\end{equation}
\begin{equation}
	s_0 = c_z - \frac{d}{2}
\end{equation}
Na podlagi določenih vrednosti $b_0$ in $s_0$, izračunamo dodatne ravni za $\forall i: i > 0$, takole:
\begin{equation}
	b_i = b_{i-1} + r
\end{equation}
\begin{equation}
	s_i = s_{i-1} - r
\end{equation}

\section{Delovanje algoritma}
Delovanje algoritma najlažje opišemo s prehodi med stanji determinističnega končnega avtomata in ključnimi podatkovnimi strukturami, ki jih algoritem uporablja. Ključne podatkovne strukture so naslednje:
\begin{itemize}
	\item polje \verb+bpozicije+: to polje vsebuje enolične oznake vseh odprtih buy pozicij. Indeks pozicije v polju je enak ravni pozicije, na primer: \verb+bpozicije[0]+ vsebuje enolično oznako pozicije na ravni $b_0$, za poljubno raven $i$, velja, da se bo enolična oznaka pozicije odprte na tej ravni nahajala v \verb+bpozicije[i]+. Za poljuben element \verb+bpozicije[i]+ velja, da ima v 			vsakem trenutku eno od naslednjih vrst vrednosti:
	\begin{itemize}
		\item če je na ravni $i$ odprta buy pozicija, potem vsebuje enolično oznako te pozicije;
		\item če na ravni $i$ še ni odprte pozicije in pozicijo lahko odpremo, potem vsebuje vrednost \verb+PROSTO+;
		\item če na ravni $i$ trenutno ni odprte pozicije, pa je prej bila in še niso izpolnjeni pogoji za ponovno odpiranje pozicije, potem vsebuje vrednost \verb+ZASEDENO+;
	\end{itemize}
	\item polje \verb+spozicije+: to polje vsebuje enolične oznake vseh odprtih prodajnih pozicij. Vsebina je analogna kot v polju \verb+bpozicije+;
	\item polje \verb+ceneBravni+: vsebuje cene posameznih buy ravni. Indeks pozicije v polju je enak ravni pozicije, katere ceno hrani, na primer \verb+ceneBravni[i]+ vsebuje ceno ravni $b_i$;
	\item polje \verb+ceneSravni+: vsebuje cene posameznih sell ravni. Indeks pozicije v polju je enak ravni pozicije, katere ceno hrani, na primer \verb+ceneSravni[i]+ vsebuje ceno ravni $s_i$;
	\item celoštevilčna spremenljivka \verb+braven+: v vsakem trenutku vsebuje podatek o trenutni ravni na nakupni strani. Če je cena trenutno na prodajni strani, potem ima spremenljivka vrednost \verb+NEVELJAVNO+;
	\item celoštevilčna spremenljivka \verb+sraven+: v vsakem trenutku vsebuje podatek o trenutni ravni na prodajni strani. Če je cena trenutno na nakupni strani, potem ima spremenljivka vrednost \verb+NEVELJAVNO+;
\end{itemize}

\subsection{S0 - Čakanje na zagon}
\subsubsection{Opis stanja}
V to stanje vstopimo po zaključenem nastavljanju začetnih vrednosti, če je v parametru $c_z$ podana zahtevana cena za zagon. V tem stanju čakamo, da bo cena valutnega para dosegla zahtevano ceno.
\subsubsection{Prehodi}
Iz tega stanja je možen samo prehod v stanje \emph{S1 - Začetno stanje}. Ob prehodu ni nobenih akcij.

\subsection{S1 - Začetno stanje}
\subsubsection{Opis stanja}
V tem stanju se znajdemo, ko je valutni par dosegel ceno zahtevano v parametru $c_z$ (prehod iz stanja S0) oziroma v primeru, da je bil parameter $c_z$ ob zagonu algoritma enak 0. V zadnjem primeru postane trenutna vrednost $c_z$, trenutna cena (Bid) valutnega para. V tem stanju čakamo, da bo dosežena bodisi osnovna raven za nakup $b_0$ ali osnovna raven za prodajo $s_0$. 
Iz tega stanja je možen prehod v stanji \emph{S2 - Nakup} ali \emph{S3 - Prodaja}.
\subsubsection{Prehod v stanje S2 - Nakup}
Pogoj za prehod:  trenutna cena valutnega para je večja ali enaka $b_0$. Akcije, ki se izvedejo, ko je izpolnjen pogoj za prehod:
\begin{itemize}
	\item odpre se pozicija buy po tržni ceni. Lastnosti pozicije: 
	\begin{itemize}
		\item stop loss = $s_0$;
		\item take profit = 0;
		\item size = L;
	\end{itemize}
	\item \verb+braven = 0+;
	\item \verb+bpozicije[0] =+ enolična oznaka odprte pozicije.
\end{itemize}
\subsubsection{Prehod v stanje S3 - Prodaja}
Pogoj za prehod: trenutna cena valutnega para je manjša ali enaka $s_0$. Akcije, ki se izvedejo, ko je izpolnjen pogoj za prehod:
\begin{itemize}
	\item odpre se pozicija sell po tržni ceni. Lastnosti pozicije: 
	\begin{itemize}
		\item stop loss = $b_0$;
		\item take profit = 0;
		\item size = L;
	\end{itemize}
	\item \verb+sraven = 0+;
	\item \verb+spozicije[0] =+ enolična oznaka odprte pozicije.
\end{itemize}
\subsection{S2 - Nakup}
\subsubsection{Opis stanja}
V tem stanju se znajdemo, ko je cena valutnega para dosegla osnovno raven za nakup in velja \verb+braven+ $\geq 0$. V vsakem trenutku je odprta najmanj ena pozicija buy. V tem stanju spremljamo raven na kateri se nahajamo in ustrezno vzdržujemo odprte buy pozicije. Če smo trenutno na ravni $i$, to pomeni, da za trenutno ceno $c$ valutnega para velja:
\begin{equation}
b_i \leq c \leq b_{i+1}
\end{equation}
oziroma izraženo s podatkovnimi strukturami algoritma:
\begin{equation}
\verb#ceneBravni[i]#\leq c < \verb#ceneBravni[i+1]#
\end{equation}
Ko je dosežena cena ravni $i+1$ in velja 
\begin{equation}
c\geq\verb#ceneBravni[i+1]#
\end{equation}
so možne naslednje situacije: 
\begin{itemize}
	\item raven $i+1$ je dosežena prvič, nima še odprte pozicije in velja
		\begin{equation}
			 \verb#bpozicije[i+1] == PROSTO#.
		\end{equation}
	 V tem primeru naredimo naslednje:
	\begin{itemize}
		\item odpremo pozicijo buy po tržni ceni. Lastnosti pozicije:
		\begin{itemize}
			\item stop loss = $s_0$;
			\item take profit = 0;
			\item size = L;
		\end{itemize}
		\item če je element polja \verb#bpozicije[i]# enolična oznaka odprte pozicije in velja, da je stop loss te pozicije enako $s_0$, potem popravimo stop loss = cena odprtja pozicije + 1 pip;
		\item zabeležimo, da je nova raven $i+1$: \verb#braven = i+1#.
	\end{itemize}
	\item raven $i+1$ je bila že dosežena prej, nima odprte pozicije, vendar pa še ni izpolnjen pogoj za ponovno odpiranje nove pozicije in velja
		\begin{equation}
			 \verb#bpozicije[i+1] == ZASEDENO#
		\end{equation}
	V tem primeru naredimo naslednje:
	\begin{itemize}
		\item zabeležimo, da je nova raven $i+1$: \verb#braven = i+1#;
		\item če je element polja \verb#bpozicije[i]# enolična oznaka odprte pozicije in velja, da je stop loss te pozicije enako $s_0$, potem popravimo stop loss = cena odprtja pozicije + 1 pip;
	\end{itemize}
	\item raven je že bila dosežena prej in ima odprto pozicijo, velja, da je element polja \verb#braven[i+1]# enolična oznaka odprte pozicije. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item zabeležimo, da je nova raven$i+1$: \verb#braven = i+1#;
		\item če je element polja \verb#bpozicije[i]# enolična oznaka odprte pozicije in velja, da je stop loss te pozicije enako $s_0$, potem popravimo stop loss = cena odprtja pozicije + 1 pip;
	\end{itemize}
\end{itemize}
Ko cena valutnega para $c$ pade pod ceno ravni $i$ in velja
\begin{equation}
c < \verb#ceneBravni[i]#
\end{equation}
so možne naslednje situacije:
\begin{itemize}
	\item pozicija na ravni $i$ je odprta in njen stop loss je nastavljen na $s_0$: velja, da je element polja \verb#braven[i]# enolična oznaka odprte pozicije. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item če ima element polja \verb#bpozicije[i+1]# vrednost \verb#ZASEDENO#, potem jo popravimo na \verb#PROSTO#;
		\item zabeležimo da je nova raven $i-1$: \verb#braven = i-1#;
	\end{itemize}
	\item pozicija na ravni $i$ se je zaprla, ker je bil njen stop loss nastavljen 1 pip nad ceno odprtja: velja, da je element polja \verb#bpozicije[i]# enolična oznaka zaprte pozicije. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item izkupičku algoritma prištejemo izkupiček zaprte pozicije;
		\item vrednost polja \verb#bpozicije[i]# nastavimo na \verb#ZASEDENO#;
		\item zabeležimo da je nova raven $i-1$: \verb#braven = i-1#;
	\end{itemize}
	\item pozicija na ravni $i$ se je zaprla že prej, a še niso izpolnjeni pogoji za ponovno odpiranje: velja, da ima element polja \verb#bpozicije[i]# vrednost \verb#ZASEDENO#. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item če ima element polja \verb#bpozicije[i+1]# vrednost \verb#ZASEDENO#, potem jo popravimo na \verb#PROSTO#;
		\item zabeležimo da je nova raven $i-1$: \verb#braven = i-1#.
	\end{itemize}
\end{itemize}
Iz tega stanja so možni prehodi v stanji \emph{S3 - Prodaja} ali \emph{S4 - Zaključek}.
\subsubsection{Prehod v stanje S3 - Prodaja}
Pogoji za prehod: trenutna cena $c$ valutnega para je nižja od cene $s_0$:
\begin{equation}
c < \verb#ceneSravni[0]#
\end{equation}
Akcije, ki se izvedejo, ko je izpolnjen pogoj za prehod:
\begin{itemize}
	\item zapremo vse morebitne nezaprte pozicije, katerih enolične oznake so še prisotne v polju \verb#bpozicije#. Takšnih pozicij sicer ne bi smelo biti, vendar se to občasno lahko zgodi zaradi nenatančnosti (angl. slippage) pri odpiranju pozicij po tržni ceni;
	\item pregledamo polje \verb#bpozicije# in če najdemo element z enolično oznako zaprte pozicije, potem izkupičku algoritma prištejemo izkupiček te pozicije. Nato vsem elementom v polju \verb#bpozicije# nastavimo vrednost \verb#PROSTO#;
	\item zabeležimo da smo na strani sell: \verb#braven# = \verb#NEVELJAVNO#;
	\item odpre se pozicija sell po tržni ceni. Lastnosti pozicije: 
	\begin{itemize}
		\item stop loss = $b_0$;
		\item take profit = 0;
		\item size = L;
	\end{itemize}
	\item \verb#sraven = 0#;
	\item \verb#spozicije[0]# = enolična oznaka odprte pozicije.
\end{itemize}
\subsubsection{Prehod v stanje S4 - Zaključek}
Pogoji za prehod: izkupiček algoritma + trenutna vrednost vseh odprtih pozicij $\geq p$. Akcije, ki se izvedejo, ko je izpolnjen pogoj za prehod:
\begin{itemize}
	\item zapremo vse odprte pozicije;
	\item ponastavimo polje \verb#bpozicije#: vsi elementi dobijo vrednost \verb#PROSTO#;
	\item ponastavimo vrednosti vseh elementov polj \verb#ceneBravni# in \verb#ceneSravni# na vrednost \verb#NEVELJAVNO#;
	\item ponastavi vrednosti spremenljivk \verb#braven# in \verb#sraven# na vrednost \verb#NEVELJAVNO#.
\end{itemize}
%-------------------------------------------------------------S3 Prodaja---------------------------------------------------------------------
\subsection{S3 - Prodaja}
V tem stanju se znajdemo, ko je cena valutnega para dosegla osnovno raven za prodajo in velja:
\begin{equation}
	\verb#sraven#\geq 0
\end{equation}
V vsakem trenutku je odprta najmanj ena pozicija sell. V tem stanju spremljamo raven na kateri se nahajamo in ustrezno vzdržujemo odprte sell pozicije. Če smo trenutno na ravni $i$, to pomeni, da za trenutno ceno $c$ valutnega para velja: $b_i\geq c>b_{i+1}$, oziroma izraženo s podatkovnimi strukturami algoritma:
\begin{equation}
	\verb#ceneSravni[i]#\geq c >\verb#ceneSravni[i+1]#
\end{equation}
Ko je dosežena cena ravni $i+1$, $c\leq\verb#ceneSravni[i+1]#$, so možne naslednje situacije: 
\begin{itemize}
	\item raven $i+1$ je dosežena prvič in nima še odprte pozicije, velja: 
	\begin{equation}
		\verb#spozicije[i+1] == PROSTO#
	\end{equation}
	V tem primeru naredimo naslednje:
	\begin{itemize}
		\item odpremo pozicijo sell po tržni ceni. Lastnosti pozicije:
		\begin{itemize}
			\item stop loss = $b_0$;
			\item take profit = 0;
			\item size = L;
		\end{itemize}
		\item če je element polja \verb#spozicije[i]# enolična oznaka odprte pozicije in velja, da je stop loss te pozicije enako $b_0$, potem popravimo stop loss = cena odprtja pozicije - 1 pip;
		\item zabeležimo, da je nova raven $i+1$: \verb#sraven = i+1#;
	\end{itemize}
	\item raven $i+1$ je bila že dosežena prej, nima odprte pozicije, vendar pa še ni izpolnjen pogoj za ponovno odpiranje nove pozicije, velja:
	\begin{equation}
		\verb#spozicije[i+1] == ZASEDENO#
	\end{equation}
 	V tem primeru naredimo naslednje:
	\begin{itemize}
		\item zabeležimo, da je nova raven $i+1$: \verb#sraven = i+1#;
		\item če je element polja \verb#spozicije[i]# enolična oznaka odprte pozicije in velja, da je stop loss te pozicije enako $b_0$, potem popravimo stop loss = cena odprtja pozicije - 1 pip;
	\end{itemize}
	\item raven je že bila dosežena prej in ima odprto pozicijo, velja, da je element polja \verb#sraven[i+1]# enolična oznaka odprte pozicije. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item zabeležimo, da je nova raven $i+1$: \verb#sraven = i+1#;
		\item če je element polja \verb#spozicije[i]# enolična oznaka odprte pozicije in velja, da je stop loss te pozicije enako $b_0$, potem popravimo stop loss = cena odprtja pozicije + 1 pip;
	\end{itemize}
\end{itemize}
Ko cena valutnega para $c$ zraste nad ceno ravni $i$ in velja $c > \verb#ceneSravni[i]#$ so možne naslednje situacije:
\begin{itemize}
	\item pozicija na ravni $i$ je odprta in njen stop loss je nastavljen na $b_0$: velja, da je element polja \verb#sraven[i]# enolična oznaka odprte pozicije. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item če ima element polja \verb#spozicije[i+1]# vrednost \verb#ZASEDENO#, potem jo popravimo na \verb#PROSTO#;
		\item zabeležimo, da je nova raven $i-1$: \verb#sraven = i-1#;
	\end{itemize}
	\item pozicija na ravni $i$ se je zaprla, ker je bil njen stop loss nastavljen 1 pip pod ceno odprtja: velja, da je element polja \verb#spozicije[i]# enolična oznaka zaprte pozicije. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item izkupičku algoritma prištejemo izkupiček zaprte pozicije;
		\item vrednost polja \verb#spozicije[i]# nastavimo na \verb#ZASEDENO#;
		\item zabeležimo, da je nova raven $i-1$: \verb#sraven = i-1#;
	\end{itemize}
	\item pozicija na ravni $i$ se je zaprla že prej, a še niso izpolnjeni pogoji za ponovno odpiranje: velja, da ima element polja \verb#spozicije[i]# vrednost \verb#ZASEDENO#. V tem primeru naredimo naslednje:
	\begin{itemize}
		\item če ima element polja \verb#spozicije[i+1]# vrednost \verb#ZASEDENO#, potem jo popravimo na \verb#PROSTO#;
		\item zabeležimo, da je nova raven $i-1$: \verb#sraven = i-1#.
	\end{itemize}
\end{itemize}
Iz tega stanja so možni prehodi v stanji \emph{S2 - Nakup} ali \emph{S4 - Zaključek}.
\subsubsection{Prehod v stanje S2 - Nakup}
Pogoji za prehod: trenutna cena $c$ valutnega para je višja od cene $b_0$: $c > \verb#ceneBravni[0]#$. Akcije, ki se izvedejo, ko je izpolnjen pogoj za prehod:
\begin{itemize}
	\item zapremo vse morebitne nezaprte pozicije, katerih enolične oznake so še prisotne v polju spozicije. Takšnih pozicij sicer ne bi smelo biti, vendar se to občasno lahko zgodi zaradi nenatančnosti (angl. slippage) pri odpiranju pozicij po tržni ceni;
	\item pregledamo polje \verb#spozicije# in če najdemo element z enolično oznako zaprte pozicije, potem izkupičku algoritma prištejemo izkupiček te pozicije. Nato vsem elementom v polju \verb#spozicije# nastavimo vrednost \verb#PROSTO#;
	\item zabeležimo da smo na strani buy: \verb#sraven = NEVELJAVNO#;
	\item odpre se pozicija buy po tržni ceni. Lastnosti pozicije:
	\begin{itemize} 
		\item stop loss = $s_0$;
		\item take profit = 0;
		\item size = L;
	\end{itemize}
	\item \verb#braven = 0#;
	\item \verb#bpozicije[0]# = enolična oznaka odprte pozicije.
\end{itemize}
\subsubsection{Prehod v stanje S4 - Zaključek}
Pogoji za prehod: izkupiček algoritma + trenutna vrednost vseh odprtih pozicij $\geq p$. Akcije, ki se izvedejo, ko je izpolnjen pogoj za prehod:
\begin{itemize}
	\item zapremo vse odprte pozicije;
	\item ponastavimo polje spozicije: vsi elementi dobijo vrednost \verb#PROSTO#;
	\item ponastavimo vrednosti vseh elementov polj \verb#ceneBravni# in \verb#ceneSravni# na vrednost \verb#NEVELJAVNO#;
	\item ponastavi vrednosti spremenljivk \verb#braven# in \verb#sraven# na vrednost \verb#NEVELJAVNO#.
\end{itemize}
\subsection{S4 - Zaključek}
V tem stanju se znajdemo, ko je bil dosežen profitni cilj. Če je vrednost parametra samodejni zagon enaka NE, potem v tem stanju ostanemo, dokler uporabnik ročno ne prekine delovanja algoritma. Če je vrednost parametra samodejni zagon enaka DA, potem ustrezno ponastavimo stanje algoritma in ga ponovno poženemo. Iz tega stanja je možen edino prehod v stanje \emph{S1 - Začetno stanje}.
\subsubsection{Prehod v stanje S1 - Začetno stanje}
Pogoji za prehod: samodejni zagon == DA. Akcije, ki se izvedejo, ko je izpolnjen pogoj za prehod: nastavimo parameter $c_z$ = 0 - ponoven zagon je možen le po trenutni tržni ceni;

\section{Zagotavljanje neprekinjenega delovanja}
Algoritem zahteva neprekinjeno spremljanje cene valutnega para, saj mora ob pravem trenutku izvajati prehode med stanji. V primeru, da pride do izpada omrežne povezave ali do prekinitve delovanja iz kakršnega koli drugega razloga, je potrebno zagotoviti, da bo tudi po takšnih izrednih prekinitvah algoritem nadaljeval z delom. Stanje algoritma je v vsakem trenutku natanko določeno z naslednjimi elementi:
\begin{itemize}
	\item vhodni parametri algoritma;
	\item ključne podatkovne strukture;
	\item stanje v katerem je algoritem.
\end{itemize}
Del zgoraj navedenih elementov se znotraj ene iteracije algoritma ne spreminja, in sicer:
\begin{itemize}
	\item vhodni parametri algoritma;
	\item nakupne in prodajne ravni: \verb#ceneBravni# in \verb#ceneSravni#;
\end{itemize}
Ključne podatkovne strukture se znotraj posamezne iteracije spreminjajo. Da bi se izognili pogostemu shranjevanju in branju stanja iz datoteke, pri katerem tudi zlahka pride do napak in nekonsistence, bomo v datoteko zapisovali samo elemente, ki se ne spreminjajo znotraj vsake iteracije, vse ostale elemente bomo zakodirali v komentarje pozicij in po ponovnem zagonu bomo iz njih izračunali stanje algoritma. 
\subsection{Shranjevanje v datoteko in globalno spremenljivko terminala}
Algoritem bo za shranjevanje stanja uporabljal datoteko iteracije, v katero bo za vsako iteracijo posebej zapisal vhodne parametre algoritma. Po zapisu vseh navedenih podatkov, se datoteka ne bo več spreminjala, tako da bomo za vsako iteracijo imeli na voljo zgodovinske podatke. Poleg tega bo algoritem shranjeval enolično številko trenutne iteracije v spremenljivko terminala \verb#M5Iteracija#. Enolična številka iteracije nam bo omogočila, da bomo ob ponovnem zagonu iz nabora vseh odprtih in zaprtih pozicij v terminalu, lahko prepoznali pozicije, ki so del določene iteracije. Na ta način se bomo izognili vzdrževanju spiska odprtih in zaprtih pozicij v datoteki, ki je komplicirano in pri katerem zlahka pride do nekonsistence med zapisi v datoteki in dejanskim stanjem. 
\subsubsection{Številčenje iteracij}
Vsako iteracijo označimo s številom, ki je večkratnik števila 100. Prva iteracija bo imela oznako 100, druga 200, tretja 300 in tako naprej. Ob prvem zagonu algoritma, algoritem preveri ali obstaja globalna spremenljivka \verb#M5Iteracija#:
\begin{itemize}
	\item če spremenljivka ne obstaja, potem algoritem spremenljivko ustvari in vanjo zapiše številko prve iteracije (100);
	\item če spremenljivka obstaja, potem se algoritem obnaša različno glede na vrednost vhodnega parametra številka iteracije:
	\begin{itemize}
		\item če je vrednost parametra 0, potem preberemo zadnjo zapisano številko iteracije iz globalne spremenljivke, jo povečamo za 100 in novo številko iteracije zapišemo nazaj v globalno spremenljivko. Algoritem začne novo iteracijo s to številko;
		\item če je vrednost parametra različna od 0, potem algoritem poišče iteracijo, ki ustreza podani vrednosti in nadaljuje delo s to iteracijo, spremenljivke \verb#M5Iteracija# ne spreminja.
	\end{itemize}
\end{itemize}
\subsubsection{Shranjevanje podatkov o iteraciji v datoteko}
Vsaka iteracija bo imela svojo datoteko, ki bo imela ime oblike \verb#M5-nnn.dat#, kjer je $nnn$ najmanj trimestna (lahko več) številka iteracije. V datoteko se bodo ob zagonu nove iteracije zapisali naslednji podatki:
\begin{itemize}
	\item razdalja med osnovnima ravnema za nakup in prodajo: $d$;
	\item razdalja med dodatnimi ravnmi za prodajo ali nakup $r$;
	\item začetna cena $c_z$;
	\item velikost pozicij v lotih $L$;
	\item profitni cilj $p$;
	\item samodejni ponovni zagon - DA/NE.
\end{itemize}
Če je vrednost vhodnega parametra samodejni ponovni zagon nastavljena na DA, potem ob zaključku iteracije povečamo številko iteracije za 100, shranimo novo vrednost v globalno spremenljivko \verb#M5Iteracija# in šele nato algoritem ponovno poženemo z novo številko iteracije. 
\subsubsection{Shranjevanje v pozicije}
V datoteke shranjujemo samo podatke, ki se spreminjajo med iteracijami, podatke vezane na pozicije, ki nastopajo znotraj posamezne iteracije pa shranjujemo zakodirane v meta podatke vsake pozicije in sicer v elementa \verb#Magic Number# in \verb#Comment#. Za vsako pozicijo potrebujemo naslednja dva podatka:
\begin{itemize}
	\item številka iteracije znotraj katere je bila pozicija odprta;
	\item raven na kateri se nahaja pozicija.
\end{itemize}
Magic number $n$ pozicije, ki je bila odprta v iteraciji $i$ na ravni $k$ nastavimo takole:
\begin{equation}
	n = i + k
\end{equation}
Iz podane številke magic number $n$, izračunamo nazaj iteracijo $i$ in raven $k$ takole:
\begin{equation}
	k = n % 100
	i = n - k
\end{equation}
S pomočjo številke iteracije prepoznamo katere pozicije so bile del nezaključene iteracije, s pomočjo števila ravni, pa znamo pozicije ustrezno prepisati v polji \verb#bpozicije# oziroma \verb#spozicije#. Glede na to, da gibanja cene medtem ko je bil algoritem zaustavljen ne poznamo, vse ravni na katerih ni nobene odprte pozicije, označimo z vrednostjo \verb#PROSTO#.
\subsection{Izračun stanja algoritma}
Po nenačrtovani prekinitvi delovanja algoritma je potrebno na podlagi trenutne cene (Bid) valutnega para in prebranih podatkov iz datotek in meta podatkov pozicij izračunati pravilno stanje v katerem naj se algoritem nahaja. Možni so naslednji scenariji:
\begin{itemize}
	\item trenutna cena valutnega para (Bid) je večja ali enaka $b_0$: 
	\begin{itemize}
		\item nastavimo vrednost spremenljivke \verb#sraven = NEVELJAVNO#;
		\item poiščemo raven $j$, za katero velja 
 		\begin{equation}
			\verb#ceneBravni[j]#>Bid
		\end{equation}
		\item  nastavimo vrednost spremenljivke \verb#braven = j-1#;
		\item nastavimo trenutno stanje algoritma: S2 - Nakup;
	\end{itemize}
	\item trenutna cena valutnega para (Bid) je manjša ali enaka s0:
	\begin{itemize}
		\item nastavimo vrednost spremenljivke \verb#braven = NEVELJAVNO#;
		\item poiščemo raven $j$, za katero velja 
		\begin{equation}
			\verb#ceneSravni[j]#<Bid
		\end{equation}
		\item nastavimo vrednost spremenljivke \verb#sraven = j-1#;
		\item nastavimo trenutno stanje algoritma: S3 - Prodaja;
	\end{itemize}
	\item trenutna cena valutnega para (Bid) je manjša od $b_0$  in hkrati večja od $s_0$. V tem primeru imamo naslednje tri možnosti:
	\begin{itemize}
		\item odprta je najmanj ena pozicija v polju \verb#bpozicije#:
		\begin{itemize}
			\item nastavimo vrednost spremenljivke \verb#sraven = NEVELJAVNO#;
			\item nastavimo vrednost spremenljivke \verb#braven = 0#;
			\item nastavimo trenutno stanje algoritma: S2 - Nakup;
		\end{itemize}
		\item odprta je najmanj ena pozicije v polju \verb#spozicije#:
		\begin{itemize}
			\item nastavimo vrednost spremenljivke \verb#braven = NEVELJAVNO#;
			\item nastavimo vrednost spremenljivke \verb#sraven = 0#;
			\item nastavimo trenutno stanje algoritma: S3 - Prodaja;
		\end{itemize}
		\item ni  nobene odprte pozicije ne v polju \verb#bpozicije# in ne v polju \verb#spozicije#:
		\begin{itemize}
			\item nastavimo vrednost spremenljivke \verb#sraven = NEVELJAVNO#;
			\item nastavimo vrednost spremenljivke \verb#braven = NEVELJAVNO#;
			\item nastavimo trenutno stanje algoritma: S1 - Začetno stanje.
		\end{itemize}
	\end{itemize}
\end{itemize}
\section{Izračun priporočene velikosti pozicije}
Pri izračunu priporočene velikosti pozicije, je potrebno upoštevati:
\begin{itemize}
	\item razpoložljiva sredstva na računu;
	\item najvišje še sprejemljivo zmanjšanje sredstev na računu (v %).
\end{itemize}
Predpostavke:
\begin{itemize}
	\item problematičen je scenarij, ko cena večkrat zaniha navzgor in navzdol in pri tem sproži stop loss pozicij na ravni 0;
	\item ko je cena valutnega para blizu začetne cene je verjetnost proženja stop loss-ov na ravni 0 večja, vendar so v tem primeru izgube manjše;
	\item bolj ko se cena valutnega para oddaljuje od začetne cene, nižja je verjetnost, da bo prišlo do proženja stop loss-ov;
	\item bolj ko se cena oddaljuje od začetne cene, večji je donos odprtih pozicij in večja je verjetnost, da bo dosežen profitni cilj.
\end{itemize}
\end{document}
